## 제네릭의 특징
* 함수를 호출할 때 인자가 전달되는 시점에 파라미터의 타입을 넘겨준다.

## 기존 타입 정의 방식과 제네릭의 차이점 - 함수 중복 선언의 단점
* 같은 로직에 타입만 다른 함수가 필요한 경우 함수를 중복 선언해야 하기 때문에 효율이 떨어진다.

## 기존 타입 정의 방식과 제네릭의 차이점 - 유니온 타입을 이용한 선언 방식의 문제점
* 선언된 여러 타입들의 공통으로 접근할 수 있는 속성이나 API에 대해서만 자동완성이 제공된다.
* 반환 값에 대한 타입이 명확하게 정의되지 않았을 때 특정 타입에만 사용할 수 있는 속성이나 API를 사용할 경우 에러가 난다.

## 제네릭의 장점과 타입 추론에서의 이점
* 실제 함수를 정의할 때 타입을 비워둔 상태에서 함수가 호출되는 시점에 타입을 추론해서 최종 반환 값의 타입까지 정의할 수 있다.

## 제네릭의 타입 제한
* 제네릭에 타입 힌트를 추가적으로 줄 수 있다.

### 정의된 타입으로 제네릭 타입 제한
interface LengthType {
  length: number;
}
function logTextLength<T extends LengthType>(text: T): T {
  text.length;
  return text;
}
logTextLength('a');
logTextLength(100); // error

### keyof로 제네릭 타입 제한
* 이미 정의된 타입에서 존재하는 키 값들만 들어갈 수 있다.
interface ShoppingItem {
  name: string;
  price: number;
  stock: number;
}

function getShoppingItemOption<T extends keyof ShoppingItem>(itemOption: T): T {
  return itemOption;
}
getShoppingItemOption(10); // error
getShoppingItemOption('name'); 

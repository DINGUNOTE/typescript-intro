## 타입 단언
* 컴파일러가 해당 요소에 대한 타입 추론을 보수적으로 할 때 개발자가 해당 요소에 타입을 단언할 수 있을 때 as 문법으로 타입을 명시해줄 수 있다.
* 주로 DOM API를 조작할 때 많이 사용 된다.
const div = document.querySelector('div') // HTMLDivElement | null
const div = document.querySelector('div') as HTMLDivElement; // HTMLDivElement
if (div) {
  div.innerText;
}

## 타입 가드
* 컴파일러가 타입을 예측할 수 있도록 코드를 작성해서 컴파일러가 타입 추론을 할 수 있게 하는 방법
* 타입 단언을 통해서도 가능하지만 코드가 길어지고 가독성이 떨어질 수 있기 때문에 타입 가드를 사용하는게 권장된다.
interface Developer {
  name: string;
  skill: string;
}

interface Person {
  name: string;
  age: number;
}

function introduce(): Developer | Person { // 유니온 타입을 사용하게 되면 공통된 속성만 접근할 수 있다.
  return { name: 'Tony', age: 33, skill: 'Iron Making' };
}
let tony = introduce();
console.log(tony.name); // 'Tony'
// console.log(tony.skill); // error

// 타입 단언을 통한 접근 방식
if ((tony as Developer).skill) {
  let skill = (tony as Developer).skill;
  console.log(skill);
} else if ((tony as Person).age) {
  let age = (tony as Person).age;
  console.log(age);
}

// 타입 가드 사용
function isDeveloper(target: Developer | Person): target is Developer { // target이 Developer인지
  return (target as Developer).skill !== undefined; // 스킬이 존재한다면 Developer이다.
}

if (isDeveloper(tony)) {
  console.log(tony.skill); // Developer
}else {
  console.log(tony.age); // Person
}

## 타입 호환
* 타입스크립트 코드에서 특정 타입이 다른 타입에 잘 맞는지 점검하는 것
* 자바스크립트는 객체 리터럴이나 익명 함수 등을 사용하기 때문에 명시적으로 타입을 지정하는 것보다는 코드의 구조 관점에서 타입을 지정하는 것이 더 잘 어울린다.
  - 구조적 타이핑 : 타입 별칭이나 인터페이스나 클래스 같은 걸 확인하는 것이 아니라 내부적으로 존재하는 속성과 타입에 대한 정의들에 대해서 비교한다.

// 인터페이스
interface Developer {
  name: string;
  skill: string;
}

// interface Person {
//   name: string;
// }

class Person {
  name: string;
  skill: string;
}

var developer: Developer;
var person: Person;
developer = new Person();

// 함수
var add = function(a: number) {
  // ...
}
var sum = function(a: number, b: number) {
  // ...
}
add = sum; // error
sum = add;

// 제네릭
interface Empty<T> {
  // ..
}
var empty1: Empty<string>;
var empty2: Empty<number>;
empty1 = empty2;
empty2 = empty1;

interface NotEmpty<T> {
  data: T;
}
var notempty1: NotEmpty<string>;
var notempty2: NotEmpty<number>;
notempty1 = notempty2; // error
  

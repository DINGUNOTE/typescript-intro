# 타입스크립트 기본타입
* 문자열
let str: string = 'hello';

* 숫자
let num: number = 10;

* 배열
let arr: Array<number> = [1,2,3]; // === 3
let heroes: Array<string> = ['Capt', 'Thor', 'Hulk'];
let items: number[] = [1,2,3]; // === 1

* 튜플 : 배열의 특정 순서의 타입까지 정의하는 것
let address: [string, number] = ['gangnam', 100];

* 객체 : 각 키 값의 타입까지 정의할 수 있다.
let obj: object = {};
// let person: object = {
//   name: 'capt',
//   age: 100
// };
let person: { name: string, age: number } = {
  name: 'thor',
  age: 1000
}

* 진위값
let show: boolean = true;

# 타입스크립트에서의 함수
* 파라미터의 타입을 정의할 수 있다.
function sum(a: number, b: number) {
  return a + b;
}
sum(10, 20);

* 함수의 반환 값에 타입을 정의할 수 있다. 
function add(): number {
  return 10;
}

function sum(a: number, b: number): number {
  return a + b;
}

# 함수의 파라미터를 제한하는 특성
* 함수의 매개변수의 갯수보다 인자가 많이 입력되거나, 적게 입력 됐을 때 에러를 발생시킨다.
function sum2(a: number, b: number): number {
  return a + b;
}
sum2(10, 20, 30) // Expected 2 arguments, but got 3
sum2(10) // Expected 2 arguments, but got 1

# 함수의 옵셔널 파라미터(?)
* 필요에 따라서 인자를 받을 수 있고, 받지 않을 수 있는 방법
function log(a: string, b?: string, c?: string) {

}
log('hello world');
log('hello ts', 'abc');
log('hello', 'ts', 'js');